// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "BE_Friends_Management/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(requestorId, targetId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", requestorId, targetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(requestorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), requestorId, targetId)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(tx *gorm.DB, requestorId, targetId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", tx, requestorId, targetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(tx, requestorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), tx, requestorId, targetId)
}

// GetAllSubscriberIds mocks base method.
func (m *MockSubscriptionRepository) GetAllSubscriberIds(targetId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriberIds", targetId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriberIds indicates an expected call of GetAllSubscriberIds.
func (mr *MockSubscriptionRepositoryMockRecorder) GetAllSubscriberIds(targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriberIds", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetAllSubscriberIds), targetId)
}

// GetDB mocks base method.
func (m *MockSubscriptionRepository) GetDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockSubscriptionRepositoryMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetDB))
}

// GetSubscription mocks base method.
func (m *MockSubscriptionRepository) GetSubscription(requestorId, targetId int64) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", requestorId, targetId)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscription(requestorId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscription), requestorId, targetId)
}
